name: Java CI with Gradle

# BE 브랜치의 push와 pull로 CI가 작동
on:
  push:
    branches: [ "BE" ]
  pull_request:
    branches: [ "BE" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: init with Gradle
      uses: gradle/gradle-build-action@v2
    - run: gradle init
    
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
        gradle-version: 8.1.1
        
     # AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

    # 빌드를 성공하면 해당 프로젝트를 zip로 만듬
    # 이름은 run 에서 설정 가능
    - name: Make zip file
      run: zip -r ./demo-ROOT.zip .
      shell: bash
     
    # 만들어 놓은 S3에 해당 zip 파일 저장
    - name: Upload to S3
      run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./demo-ROOT.zip s3://travel-planner-buckets/demo-ROOT.zip
    
    # AWS CodeDeploy에 배포
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name travel-planner-app \
        --deployment-group-name travel-planner-deploy-group \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=travel-planner-buckets,bundleType=zip,key=demo-ROOT.zip \
        --region ${{ secrets.AWS_REGION }}
        
